{"ast":null,"code":"import _defineProperty from \"/home/user/todo1/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/user/todo1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/user/todo1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/user/todo1/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/user/todo1/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/user/todo1/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/user/todo1/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/user/todo1/src/TodoContent/TodoContentParent.js\";\nimport React, { Component } from \"react\";\nimport TodoEdit from \"./TodoEdit\";\nimport TodoContentChild from \"./TodoContentChild\";\nimport PropTypes from \"prop-types\";\nimport update from \"react-addons-update\";\nimport Button from \"@material-ui/core/Button\";\n\nvar TodoContentParent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TodoContentParent, _Component);\n\n  function TodoContentParent(props) {\n    var _this;\n\n    _classCallCheck(this, TodoContentParent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TodoContentParent).call(this, props));\n    _this.state = {\n      viewMaxAlert: \"Loading..!\",\n      viewIndex: 0,\n      newEdit: false,\n      TodoData: []\n    };\n    _this.onEditCheck = _this.onEditCheck.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.todoSaveP = _this.todoSaveP.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.todoDeleteP = _this.todoDeleteP.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.todoUpdateP = _this.todoUpdateP.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onEditCheckChild = _this.onEditCheckChild.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TodoContentParent, [{\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      //텍스트 필드 값 변화시키기 위해\n      this.setState({\n        keyword: e.target.value\n      });\n    }\n  }, {\n    key: \"onEditCheck\",\n    value: function onEditCheck(e) {\n      //에디트 창 열고 닫기 위함\n      if (!this.state.newEdit) {\n        this.setState({\n          newEdit: !this.state.newEdit\n        });\n      } else {\n        this.setState({\n          newEdit: !this.state.newEdit\n        });\n      }\n    }\n  }, {\n    key: \"onEditCheckChild\",\n    value: function onEditCheckChild() {\n      //차일드 컴포넌드 손델시에 에디트창 닫기 위함\n      this.setState({\n        newEdit: false\n      });\n    }\n  }, {\n    key: \"todoSaveP\",\n    value: function todoSaveP(contact) {\n      //배열에 값 추가\n      this.setState({\n        TodoData: update(this.state.TodoData, {\n          $push: [contact]\n        })\n      });\n    }\n  }, {\n    key: \"todoDeleteP\",\n    value: function todoDeleteP(childIndex) {\n      //배열의 인덱스 값에 1개 지우기\n      this.setState({\n        TodoData: update(this.state.TodoData, {\n          $splice: [[childIndex, 1]]\n        }),\n        childIndex: -1\n      });\n    }\n  }, {\n    key: \"todoUpdateP\",\n    value: function todoUpdateP(data, index) {\n      //배열의 인덱스 값에 1개 업데이트\n      this.setState({\n        TodoData: update(this.state.TodoData, _defineProperty({}, index, {\n          data: {\n            $set: data\n          }\n        }))\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      /*다이어로그 써먹자*/\n      var mapToComponents = function mapToComponents(data) {\n        return data.map(function (contact, i) {\n          return React.createElement(TodoContentChild, {\n            onUpdateOn: _this2.onEditCheckChild,\n            onRemove: _this2.todoDeleteP,\n            onUpdate: _this2.todoUpdateP,\n            contact: contact,\n            index: i,\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85\n            },\n            __self: this\n          });\n        });\n      };\n\n      return (\n        /* 새로 만드는 부분*/\n        React.createElement(\"div\", {\n          className: \"TDParent\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, \"\\uB098\\uC758 \\uD560\\uC77C\\uB4E4\"), React.createElement(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.onEditCheck,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, \"\\uCD94\\uAC00\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, this.state.newEdit ? React.createElement(TodoEdit, {\n          todoSave: this.todoSaveP,\n          todoOut: this.onEditCheck,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }) : React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, mapToComponents(this.state.TodoData)))\n      );\n    }\n  }]);\n\n  return TodoContentParent;\n}(Component);\n\nexport { TodoContentParent as default };\nTodoContentParent.defaultProps = {\n  contact: {},\n  onEditCheck: function onEditCheck() {\n    console.error(\"버튼채크 오류\");\n  }\n};\nTodoContentParent.propTypes = {\n  contact: PropTypes.object,\n  onEditCheck: PropTypes.func\n};","map":{"version":3,"sources":["/home/user/todo1/src/TodoContent/TodoContentParent.js"],"names":["React","Component","TodoEdit","TodoContentChild","PropTypes","update","Button","TodoContentParent","props","state","viewMaxAlert","viewIndex","newEdit","TodoData","onEditCheck","bind","handleChange","todoSaveP","todoDeleteP","todoUpdateP","onEditCheckChild","e","setState","keyword","target","value","contact","$push","childIndex","$splice","data","index","$set","mapToComponents","map","i","defaultProps","console","error","propTypes","object","func"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport TodoEdit from \"./TodoEdit\";\nimport TodoContentChild from \"./TodoContentChild\";\nimport PropTypes from \"prop-types\";\n\nimport update from \"react-addons-update\";\nimport Button from \"@material-ui/core/Button\";\n\nexport default class TodoContentParent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewMaxAlert: \"Loading..!\",\n      viewIndex: 0,\n      newEdit: false,\n      TodoData: []\n    };\n    this.onEditCheck = this.onEditCheck.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.todoSaveP = this.todoSaveP.bind(this);\n    this.todoDeleteP = this.todoDeleteP.bind(this);\n    this.todoUpdateP = this.todoUpdateP.bind(this);\n    this.onEditCheckChild = this.onEditCheckChild.bind(this);\n  }\n\n  handleChange(e) {\n    //텍스트 필드 값 변화시키기 위해\n    this.setState({\n      keyword: e.target.value\n    });\n  }\n  onEditCheck(e) {\n    //에디트 창 열고 닫기 위함\n    if (!this.state.newEdit) {\n      this.setState({\n        newEdit: !this.state.newEdit\n      });\n    } else {\n      this.setState({\n        newEdit: !this.state.newEdit\n      });\n    }\n  }\n  onEditCheckChild() {\n    //차일드 컴포넌드 손델시에 에디트창 닫기 위함\n    this.setState({\n      newEdit: false\n    });\n  }\n\n  todoSaveP(contact) {\n    //배열에 값 추가\n    this.setState({\n      TodoData: update(this.state.TodoData, { $push: [contact] })\n    });\n  }\n\n  todoDeleteP(childIndex) {\n    //배열의 인덱스 값에 1개 지우기\n    this.setState({\n      TodoData: update(this.state.TodoData, {\n        $splice: [[childIndex, 1]]\n      }),\n      childIndex: -1\n    });\n  }\n\n  todoUpdateP(data, index) {\n    //배열의 인덱스 값에 1개 업데이트\n    this.setState({\n      TodoData: update(this.state.TodoData, {\n        [index]: {\n          data: { $set: data }\n        }\n      })\n    });\n  }\n\n  render() {\n    /*다이어로그 써먹자*/\n\n    const mapToComponents = data => {\n      return data.map((contact, i) => {\n        return (\n          <TodoContentChild\n            onUpdateOn={this.onEditCheckChild}\n            onRemove={this.todoDeleteP}\n            onUpdate={this.todoUpdateP}\n            contact={contact}\n            index={i}\n            key={i}\n          />\n        );\n      });\n    };\n\n    return (\n      /* 새로 만드는 부분*/\n      <div className=\"TDParent\">\n        <h1>나의 할일들</h1>\n        <Button variant=\"contained\" color=\"primary\" onClick={this.onEditCheck}>\n          추가\n        </Button>\n        <div>\n          {this.state.newEdit ? (\n            <TodoEdit todoSave={this.todoSaveP} todoOut={this.onEditCheck} />\n          ) : (\n            <div />\n          )}\n        </div>\n        <div>{mapToComponents(this.state.TodoData)}</div>\n      </div>\n    );\n  }\n}\nTodoContentParent.defaultProps = {\n  contact: {},\n  onEditCheck: () => {\n    console.error(\"버튼채크 오류\");\n  }\n};\n\nTodoContentParent.propTypes = {\n  contact: PropTypes.object,\n  onEditCheck: PropTypes.func\n};\n"]},"metadata":{},"sourceType":"module"}